#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
     600                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000001E-05   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(65,33)
data.Pn
data.np
data.J
data.rpm_n
data.wn
data.Ta
data.Q_n
data.H_n
data.L[1]
data.L[2]
data.d[1]
data.d[2]
data.A[1]
data.A[2]
data.Tw
MechanicalSystem.u
MechanicalSystem.y
MechanicalSystem.b[1]
MechanicalSystem.a[1]
MechanicalSystem.a[2]
MechanicalSystem.initType
MechanicalSystem.x_start[1]
MechanicalSystem.y_start
MechanicalSystem.x[1]
MechanicalSystem.na
MechanicalSystem.nb
MechanicalSystem.nx
MechanicalSystem.bb[1]
MechanicalSystem.bb[2]
MechanicalSystem.d
MechanicalSystem.a_end
MechanicalSystem.x_scaled[1]
MechanicalSystem.der(x_scaled[1])
add.y
add.k1
add.k2
one.k
w.k
w.y
powerChange.amplitude
powerChange.rising
powerChange.width
powerChange.falling
powerChange.period
powerChange.nperiod
powerChange.offset
powerChange.startTime
powerChange.T_rising
powerChange.T_width
powerChange.T_falling
powerChange.T_start
powerChange.count
P.k
P.y
division.y
inertia.flange_b.tau
inertia.J
inertia.stateSelect
inertia.phi
inertia.der(phi)
inertia.w
inertia.der(w)
torque.useSupport
torque.phi_support
speedSensor.flange.tau

double initialValue(65,6)
 -1  4.5000000000000000E+07       0                       0                
  1   280   # data.Pn
 -1      12                       2                 1.0000000000000000E+100
  1   282   # data.np
 -1  1.8300000000000000E+05       0                       0                
  1   280   # data.J
  0       0                       0                       0                
  6   256   # data.rpm_n
  0       0                       0                       0                
  6   256   # data.wn
  0       0                       0                       0                
  6   256   # data.Ta
 -1      92                       0                       0                
  1   280   # data.Q_n
 -1      50                       0                       0                
  1   280   # data.H_n
 -1     200                       0                       0                
  1   280   # data.L[1]
 -1     100                       0                       0                
  1   280   # data.L[2]
 -1  5.5000000000000000E+00       0                       0                
  1   280   # data.d[1]
 -1  5.5000000000000000E+00       0                       0                
  1   280   # data.d[2]
  0       0                       0                       0                
  6   256   # data.A[1]
  0       0                       0                       0                
  6   256   # data.A[2]
  0       0                       0                       0                
  6   256   # data.Tw
  0       0                       0                       0                
  6   256   # MechanicalSystem.u
  0       0                       0                       0                
  6   256   # MechanicalSystem.y
 -1       1                       0                       0                
  1   280   # MechanicalSystem.b[1]
  0       0                       0                       0                
  6   256   # MechanicalSystem.a[1]
  0       0                       0                       0                
  6   256   # MechanicalSystem.a[2]
  0       1                       1                       4                
  6   258   # MechanicalSystem.initType
 -1       0                       0                       0                
  1   280   # MechanicalSystem.x_start[1]
 -1       0                       0                       0                
  1   280   # MechanicalSystem.y_start
  0       0                       0                       0                
  6   256   # MechanicalSystem.x[1]
  0       2                       0                       0                
  6  1282   # MechanicalSystem.na
  0       1                       0                       0                
  6  1282   # MechanicalSystem.nb
  0       1                       0                       0                
  6  1282   # MechanicalSystem.nx
  0       0                       0                       0                
  6  1280   # MechanicalSystem.bb[1]
  0       0                       0                       0                
  6  1280   # MechanicalSystem.bb[2]
  0       0                       0                       0                
  6  1280   # MechanicalSystem.d
  0       0                       0                       0                
  6  1280   # MechanicalSystem.a_end
 -1       0                       0                       0                
  2  1304   # MechanicalSystem.x_scaled[1]
  0       0                       0                       0                
  3  1280   # MechanicalSystem.der(x_scaled[1])
  0       0                       0                       0                
  6   256   # add.y
 -1       1                       0                       0                
  1   280   # add.k1
 -1       1                       0                       0                
  1   280   # add.k2
 -1       1                       0                       0                
  1   280   # one.k
  0       1                       0                       0                
  6   256   # w.k
  0       0                       0                       0                
  6   256   # w.y
 -1  2.0000000000000001E-01       0                       0                
  1   280   # powerChange.amplitude
 -1      50                       0                 1.0000000000000000E+100
  1   280   # powerChange.rising
 -1      50                       0                 1.0000000000000000E+100
  1   280   # powerChange.width
 -1      50                       0                 1.0000000000000000E+100
  1   280   # powerChange.falling
 -1     200                  9.9999999999999997E-61 1.0000000000000000E+100
  1   280   # powerChange.period
 -1      -1                       0                       0                
  1   282   # powerChange.nperiod
 -1 -1.0000000000000001E-01       0                       0                
  1   280   # powerChange.offset
 -1      25                       0                       0                
  1   280   # powerChange.startTime
  0       0                       0                       0                
  6  1280   # powerChange.T_rising
  0       0                       0                       0                
  6  1280   # powerChange.T_width
  0       0                       0                       0                
  6  1280   # powerChange.T_falling
  0       0                       0                       0                
  6  1344   # powerChange.T_start
  0       0                       0                       0                
  6  1346   # powerChange.count
  0       1                       0                       0                
  6   256   # P.k
  0       0                       0                       0                
  6   256   # P.y
  0       0                       0                       0                
  6   256   # division.y
  0       0                       0                       0                
  6   388   # inertia.flange_b.tau
  0       1                       0                 1.0000000000000000E+100
  6   256   # inertia.J
  0       3                       1                       5                
  6   770   # inertia.stateSelect
 -1       0                       0                       0                
  2   280   # inertia.phi
  0       0                       0                       0                
  3   256   # inertia.der(phi)
 -1       0                       0                       0                
  2   272   # inertia.w
  0       0                       0                       0                
  3   256   # inertia.der(w)
  0       0                       0                       0                
  6   769   # torque.useSupport
  0       0                       0                       0                
  6  1280   # torque.phi_support
  0       0                       0                       0                
  6   388   # speedSensor.flange.tau


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(65,127)
Nominal turbine power [W]
Number of poles of generator [:#(type=Integer)]
Turbine and generator inertia [kg.m2]
Nominal turbine speed [rev/min]
Nominal angular velocity [rad/s]
Mechanical time constant [s]
Nominal flow rate [m3/s]
Nominal water head [m]
Total length of the waterway [m]
Total length of the waterway [m]
Average pipe diameter [m]
Average pipe diameter [m]
Average pipe area [m2]
Average pipe area [m2]
Time constant of the waterway [s]
Connector of Real input signal
Connector of Real output signal
Numerator coefficients of transfer function (e.g., 2*s+3 is specified as {2,3})
Denominator coefficients of transfer function (e.g., 5*s+6 is specified as {5,6}) [s]
Denominator coefficients of transfer function (e.g., 5*s+6 is specified as {5,6}) [s]
Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess values of states
Initial value of output (derivatives of y are zero up to nx-1-th derivative)
State of transfer function from controller canonical form
Size of Denominator of transfer function. [:#(type=Integer)]
Size of Numerator of transfer function. [:#(type=Integer)]
[:#(type=Integer)]




Scaled vector x
der(Scaled vector x)
Connector of Real output signal
Gain of upper input
Gain of lower input
Constant output value
Gain value multiplied with input signal [1]
Output signal connector
Amplitude of trapezoid
Rising duration of trapezoid [s]
Width duration of trapezoid [s]
Falling duration of trapezoid [s]
Time for one period [s]
Number of periods (< 0 means infinite number of periods) [:#(type=Integer)]
Offset of output signal
Output = offset for time < startTime [s]
End time of rising phase within one period [s]
End time of width phase within one period [s]
End time of falling phase within one period [s]
Start time of current period [s]
Period count [:#(type=Integer)]
Gain value multiplied with input signal [1]
Output signal connector
Connector of Real output signal [N.m]
Cut torque in the flange [N.m]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
der(Absolute rotation angle of component) [rad/s]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Absolute angle of support flange [rad|deg]
Cut torque in the flange [N.m]

